// =================================================================================
// AI Recommendations Engine - AppGym Pro
// =================================================================================

class AIRecommendations {
    constructor() {
        this.recommendations = [];
        this.userProfile = {};
        this.exerciseDatabase = {
            'Bench Press': {
                category: 'push',
                muscleGroup: 'Ng·ª±c',
                difficulty: 'intermediate',
                progressionRate: 2.5, // kg per week
                optimalReps: [6, 8, 10, 12],
                restTime: 180 // seconds
            },
            'Squat': {
                category: 'legs',
                muscleGroup: 'Ch√¢n',
                difficulty: 'intermediate',
                progressionRate: 5,
                optimalReps: [5, 8, 10],
                restTime: 240
            },
            'Deadlift': {
                category: 'pull',
                muscleGroup: 'L∆∞ng',
                difficulty: 'advanced',
                progressionRate: 5,
                optimalReps: [3, 5, 8],
                restTime: 300
            },
            'Pull-up': {
                category: 'pull',
                muscleGroup: 'L∆∞ng',
                difficulty: 'intermediate',
                progressionRate: 1, // reps per week
                optimalReps: [5, 8, 10, 12],
                restTime: 180
            },
            'Push-up': {
                category: 'push',
                muscleGroup: 'Ng·ª±c',
                difficulty: 'beginner',
                progressionRate: 2, // reps per week
                optimalReps: [10, 15, 20, 25],
                restTime: 120
            }
        };
    }

    // Ph√¢n t√≠ch ti·∫øn ƒë·ªô v√† ƒë∆∞a ra g·ª£i √Ω
    analyzeProgress(workouts) {
        this.recommendations = [];
        
        if (!workouts || workouts.length === 0) {
            return this.getInitialRecommendations();
        }

        // Ph√¢n t√≠ch t·ª´ng b√†i t·∫≠p
        const exerciseAnalysis = this.analyzeExercises(workouts);
        
        // T·∫°o g·ª£i √Ω d·ª±a tr√™n ph√¢n t√≠ch
        this.generateRecommendations(exerciseAnalysis);
        
        // Ph√°t hi·ªán plateau
        this.detectPlateaus(exerciseAnalysis);
        
        // G·ª£i √Ω b√†i t·∫≠p m·ªõi
        this.suggestNewExercises(workouts);
        
        // T·ªëi ∆∞u h√≥a workout plan
        this.optimizeWorkoutPlan(workouts);

        return this.recommendations;
    }

    // Ph√¢n t√≠ch chi ti·∫øt t·ª´ng b√†i t·∫≠p
    analyzeExercises(workouts) {
        const analysis = {};
        
        workouts.forEach(workout => {
            const exercise = workout.exercise;
            if (!analysis[exercise]) {
                analysis[exercise] = {
                    workouts: [],
                    maxWeight: 0,
                    maxReps: 0,
                    totalVolume: 0,
                    frequency: 0,
                    lastWorkout: null,
                    progression: []
                };
            }
            
            const sets = workout.sets || [];
            const exerciseType = workout.exerciseType || 'weight';
            
            let workoutVolume = 0;
            let maxWeight = 0;
            let maxReps = 0;
            
            sets.forEach(set => {
                if (exerciseType === 'bodyweight') {
                    workoutVolume += set.reps || 0;
                    maxReps = Math.max(maxReps, set.reps || 0);
                } else {
                    const weight = set.weight || 0;
                    const reps = set.reps || 0;
                    workoutVolume += weight * reps;
                    maxWeight = Math.max(maxWeight, weight);
                    maxReps = Math.max(maxReps, reps);
                }
            });
            
            analysis[exercise].workouts.push({
                date: workout.date,
                volume: workoutVolume,
                maxWeight: maxWeight,
                maxReps: maxReps,
                sets: sets.length
            });
            
            analysis[exercise].maxWeight = Math.max(analysis[exercise].maxWeight, maxWeight);
            analysis[exercise].maxReps = Math.max(analysis[exercise].maxReps, maxReps);
            analysis[exercise].totalVolume += workoutVolume;
            analysis[exercise].frequency++;
            
            if (!analysis[exercise].lastWorkout || new Date(workout.date) > new Date(analysis[exercise].lastWorkout)) {
                analysis[exercise].lastWorkout = workout.date;
            }
        });
        
        return analysis;
    }

    // T·∫°o g·ª£i √Ω d·ª±a tr√™n ph√¢n t√≠ch
    generateRecommendations(analysis) {
        Object.keys(analysis).forEach(exercise => {
            const data = analysis[exercise];
            const exerciseInfo = this.exerciseDatabase[exercise];
            
            if (!exerciseInfo) return;
            
            // G·ª£i √Ω tƒÉng m·ª©c t·∫°
            if (data.workouts.length >= 3) {
                const recentWorkouts = data.workouts.slice(-3);
                const avgVolume = recentWorkouts.reduce((sum, w) => sum + w.volume, 0) / recentWorkouts.length;
                
                if (avgVolume > data.totalVolume / data.workouts.length * 1.1) {
                    const suggestedIncrease = exerciseInfo.progressionRate;
                    this.recommendations.push({
                        type: 'progressive_overload',
                        exercise: exercise,
                        title: 'üéØ G·ª£i √ù TƒÉng M·ª©c T·∫°',
                        message: `D·ª±a tr√™n ti·∫øn ƒë·ªô g·∫ßn ƒë√¢y, b·∫°n n√™n tƒÉng m·ª©c t·∫° ${exercise} l√™n ${suggestedIncrease}kg. Ti·∫øn ƒë·ªô c·ªßa b·∫°n r·∫•t t·ªët!`,
                        priority: 'high',
                        action: `TƒÉng m·ª©c t·∫° l√™n ${suggestedIncrease}kg`
                    });
                }
            }
            
            // G·ª£i √Ω thay ƒë·ªïi rep scheme
            if (data.maxReps > exerciseInfo.optimalReps[exerciseInfo.optimalReps.length - 1]) {
                this.recommendations.push({
                    type: 'rep_scheme',
                    exercise: exercise,
                    title: 'üìä T·ªëi ∆Øu Rep Scheme',
                    message: `B·∫°n ƒëang t·∫≠p ${data.maxReps} reps cho ${exercise}. Khuy·∫øn ngh·ªã gi·∫£m reps v√† tƒÉng m·ª©c t·∫° ƒë·ªÉ t·ªëi ∆∞u hypertrophy.`,
                    priority: 'medium',
                    action: 'Gi·∫£m reps, tƒÉng m·ª©c t·∫°'
                });
            }
            
            // G·ª£i √Ω t·∫ßn su·∫•t t·∫≠p
            const daysSinceLastWorkout = this.calculateDaysSince(data.lastWorkout);
            if (daysSinceLastWorkout > 7) {
                this.recommendations.push({
                    type: 'frequency',
                    exercise: exercise,
                    title: '‚è∞ T·∫ßn Su·∫•t T·∫≠p Luy·ªán',
                    message: `ƒê√£ ${daysSinceLastWorkout} ng√†y k·ªÉ t·ª´ l·∫ßn t·∫≠p ${exercise} cu·ªëi. N√™n t·∫≠p l·∫°i s·ªõm ƒë·ªÉ duy tr√¨ ti·∫øn ƒë·ªô.`,
                    priority: 'high',
                    action: 'T·∫≠p l·∫°i trong 1-2 ng√†y t·ªõi'
                });
            }
        });
    }

    // Ph√°t hi·ªán plateau
    detectPlateaus(analysis) {
        Object.keys(analysis).forEach(exercise => {
            const data = analysis[exercise];
            
            if (data.workouts.length < 6) return;
            
            const recentWorkouts = data.workouts.slice(-6);
            const volumes = recentWorkouts.map(w => w.volume);
            
            // Ki·ªÉm tra xem c√≥ plateau kh√¥ng (kh√¥ng tƒÉng trong 6 bu·ªïi t·∫≠p)
            const avgVolume = volumes.reduce((sum, v) => sum + v, 0) / volumes.length;
            const variance = volumes.reduce((sum, v) => sum + Math.pow(v - avgVolume, 2), 0) / volumes.length;
            
            if (variance < avgVolume * 0.1) { // √çt bi·∫øn ƒë·ªông
                this.recommendations.push({
                    type: 'plateau',
                    exercise: exercise,
                    title: 'üîÑ Ph√°t Hi·ªán Plateau',
                    message: `${exercise} c√≥ v·∫ª ƒëang plateau. Khuy·∫øn ngh·ªã thay ƒë·ªïi rep scheme ho·∫∑c th√™m b√†i t·∫≠p b·ªï tr·ª£.`,
                    priority: 'high',
                    action: 'Thay ƒë·ªïi rep scheme ho·∫∑c th√™m b√†i t·∫≠p m·ªõi'
                });
            }
        });
    }

    // G·ª£i √Ω b√†i t·∫≠p m·ªõi
    suggestNewExercises(workouts) {
        const currentExercises = [...new Set(workouts.map(w => w.exercise))];
        const muscleGroups = [...new Set(workouts.map(w => w.muscleGroup))];
        
        // T√¨m b√†i t·∫≠p b·ªï sung cho muscle groups hi·ªán t·∫°i
        Object.keys(this.exerciseDatabase).forEach(exercise => {
            const exerciseInfo = this.exerciseDatabase[exercise];
            
            if (!currentExercises.includes(exercise) && muscleGroups.includes(exerciseInfo.muscleGroup)) {
                this.recommendations.push({
                    type: 'new_exercise',
                    exercise: exercise,
                    title: 'üÜï B√†i T·∫≠p M·ªõi',
                    message: `Th·ª≠ th√™m ${exercise} v√†o routine ƒë·ªÉ tƒÉng c∆∞·ªùng ${exerciseInfo.muscleGroup}.`,
                    priority: 'medium',
                    action: `Th√™m ${exercise} v√†o workout plan`
                });
            }
        });
    }

    // T·ªëi ∆∞u h√≥a workout plan
    optimizeWorkoutPlan(workouts) {
        const recentWorkouts = workouts.slice(-10);
        const workoutFrequency = this.calculateWorkoutFrequency(recentWorkouts);
        
        if (workoutFrequency < 3) {
            this.recommendations.push({
                type: 'workout_frequency',
                exercise: 'T·ªïng th·ªÉ',
                title: 'üìÖ T·∫ßn Su·∫•t T·∫≠p Luy·ªán',
                message: `B·∫°n ƒëang t·∫≠p ${workoutFrequency} l·∫ßn/tu·∫ßn. ƒê·ªÉ t·ªëi ∆∞u k·∫øt qu·∫£, n√™n t·∫≠p 3-5 l·∫ßn/tu·∫ßn.`,
                priority: 'medium',
                action: 'TƒÉng t·∫ßn su·∫•t t·∫≠p luy·ªán'
            });
        }
        
        // Ki·ªÉm tra rest time
        const restTimeAnalysis = this.analyzeRestTime(recentWorkouts);
        if (restTimeAnalysis.needsMoreRest) {
            this.recommendations.push({
                type: 'rest_time',
                exercise: 'T·ªïng th·ªÉ',
                title: 'üò¥ Th·ªùi Gian Ngh·ªâ',
                message: 'C√≥ v·∫ª b·∫°n ƒëang t·∫≠p qu√° s√°t nhau. N√™n ngh·ªâ √≠t nh·∫•t 48h gi·ªØa c√°c bu·ªïi t·∫≠p c√πng nh√≥m c∆°.',
                priority: 'medium',
                action: 'TƒÉng th·ªùi gian ngh·ªâ gi·ªØa c√°c bu·ªïi t·∫≠p'
            });
        }
    }

    // G·ª£i √Ω ban ƒë·∫ßu cho ng∆∞·ªùi m·ªõi
    getInitialRecommendations() {
        return [
            {
                type: 'welcome',
                exercise: 'T·ªïng th·ªÉ',
                title: 'üéâ Ch√†o M·ª´ng ƒê·∫øn V·ªõi AppGym!',
                message: 'B·∫Øt ƒë·∫ßu ghi l·∫°i bu·ªïi t·∫≠p ƒë·∫ßu ti√™n ƒë·ªÉ nh·∫≠n g·ª£i √Ω c√° nh√¢n h√≥a t·ª´ AI.',
                priority: 'high',
                action: 'Th√™m bu·ªïi t·∫≠p ƒë·∫ßu ti√™n'
            },
            {
                type: 'starter_workout',
                exercise: 'T·ªïng th·ªÉ',
                title: 'üèãÔ∏è Workout Plan Kh·ªüi ƒê·∫ßu',
                message: 'Th·ª≠ workout plan c∆° b·∫£n: Push-up, Squat, Pull-up m·ªói ng√†y ƒë·ªÉ x√¢y d·ª±ng th√≥i quen.',
                priority: 'high',
                action: 'B·∫Øt ƒë·∫ßu v·ªõi workout plan c∆° b·∫£n'
            }
        ];
    }

    // T√≠nh to√°n s·ªë ng√†y t·ª´ l·∫ßn t·∫≠p cu·ªëi
    calculateDaysSince(lastWorkoutDate) {
        if (!lastWorkoutDate) return 999;
        const lastDate = new Date(lastWorkoutDate);
        const today = new Date();
        const diffTime = Math.abs(today - lastDate);
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    // T√≠nh t·∫ßn su·∫•t t·∫≠p luy·ªán
    calculateWorkoutFrequency(recentWorkouts) {
        if (recentWorkouts.length === 0) return 0;
        
        const firstDate = new Date(recentWorkouts[0].date);
        const lastDate = new Date(recentWorkouts[recentWorkouts.length - 1].date);
        const daysDiff = Math.ceil((lastDate - firstDate) / (1000 * 60 * 60 * 24));
        
        if (daysDiff === 0) return recentWorkouts.length;
        
        const weeks = daysDiff / 7;
        return recentWorkouts.length / weeks;
    }

    // Ph√¢n t√≠ch th·ªùi gian ngh·ªâ
    analyzeRestTime(recentWorkouts) {
        const muscleGroupWorkouts = {};
        
        recentWorkouts.forEach(workout => {
            const muscleGroup = workout.muscleGroup;
            if (!muscleGroupWorkouts[muscleGroup]) {
                muscleGroupWorkouts[muscleGroup] = [];
            }
            muscleGroupWorkouts[muscleGroup].push(new Date(workout.date));
        });
        
        let needsMoreRest = false;
        
        Object.keys(muscleGroupWorkouts).forEach(muscleGroup => {
            const dates = muscleGroupWorkouts[muscleGroup].sort((a, b) => a - b);
            
            for (let i = 1; i < dates.length; i++) {
                const daysDiff = Math.ceil((dates[i] - dates[i-1]) / (1000 * 60 * 60 * 24));
                if (daysDiff < 2) {
                    needsMoreRest = true;
                    break;
                }
            }
        });
        
        return { needsMoreRest };
    }

    // D·ª± ƒëo√°n 1RM
    predict1RM(weight, reps) {
        // S·ª≠ d·ª•ng c√¥ng th·ª©c Brzycki
        return weight * (36 / (37 - reps));
    }

    // D·ª± ƒëo√°n ti·∫øn ƒë·ªô
    predictProgress(exercise, currentWeight, currentReps) {
        const exerciseInfo = this.exerciseDatabase[exercise];
        if (!exerciseInfo) return null;
        
        const current1RM = this.predict1RM(currentWeight, currentReps);
        const weeklyIncrease = exerciseInfo.progressionRate;
        
        return {
            nextWeek: current1RM + weeklyIncrease,
            nextMonth: current1RM + weeklyIncrease * 4,
            next3Months: current1RM + weeklyIncrease * 12
        };
    }

    // L·∫•y g·ª£i √Ω theo ∆∞u ti√™n
    getRecommendationsByPriority(priority = 'all') {
        if (priority === 'all') {
            return this.recommendations.sort((a, b) => {
                const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
                return priorityOrder[b.priority] - priorityOrder[a.priority];
            });
        }
        
        return this.recommendations.filter(rec => rec.priority === priority);
    }

    // L·∫•y g·ª£i √Ω cho b√†i t·∫≠p c·ª• th·ªÉ
    getRecommendationsForExercise(exercise) {
        return this.recommendations.filter(rec => rec.exercise === exercise);
    }
}

// Export cho s·ª≠ d·ª•ng trong app.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIRecommendations;
} 